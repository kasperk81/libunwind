name: Test .NET 8 on Nano Server

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual triggering

jobs:
  test-nano-dotnet:
    runs-on: windows-latest

    steps:
      - name: Set up Docker and Create Console Application
        run: |
          # Install .NET 8 SDK on the host
          Invoke-WebRequest -Uri https://dot.net/v1/dotnet-install.ps1 -OutFile dotnet-install.ps1
          & .\dotnet-install.ps1 -Channel 8.0 -InstallDir 'C:\dotnet'

          # Add dotnet to the PATH for this session
          $env:Path += ';C:\dotnet'

          # Create a new .NET console application in the current directory
          dotnet new console -o MyApp

          # Write the custom Program.cs to output the SpecialFolder paths
          Set-Content -Path ./MyApp/Program.cs -Value @'
          using System;
          using System.Runtime.InteropServices;
          
          class Program
          {
              // Declare SHGetFolderPathW function using P/Invoke
              [DllImport("shell32.dll", SetLastError = false, BestFitMapping = false, ExactSpelling = true)]
              internal static extern unsafe int SHGetFolderPathW(
                  IntPtr hwndOwner,
                  int nFolder,
                  IntPtr hToken,
                  uint dwFlags,
                  char* pszPath);
          
              // Declare SHGetKnownFolderPath function using P/Invoke
              [DllImport("shell32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
              internal static extern int SHGetKnownFolderPath(
                  ref Guid rfid, 
                  uint dwFlags, 
                  IntPtr hToken, 
                  [Out] StringBuilder pszPath);
          
              // Define KNOWNFOLDERID structure (just GUID here for simplicity)
              public static readonly Guid FOLDERID_Documents = new Guid("FDD39AD0-238F-46AF-ADB4-6C85480369C7");
              public static readonly Guid FOLDERID_Desktop = new Guid("B4BFCC3A-DB2C-424C-B029-7FE99A1B93A6");
              // You can define more known folder GUIDs as needed
              
              static void Main()
              {
                  foreach (Environment.SpecialFolder folder in Enum.GetValues(typeof(Environment.SpecialFolder)))
                  {
                      // Get the folder path using .NET Environment method
                      string dotNetPath = Environment.GetFolderPath(folder);
                      Console.WriteLine($"[Environment] {folder}: {dotNetPath}");
          
                      // Get the folder path using SHGetFolderPathW
                      string shellPath = GetShellFolderPath(folder);
                      Console.WriteLine($"[SHGetFolderPathW] {folder}: {shellPath}");
          
                      // For known folders, call SHGetKnownFolderPath
                      if (folder == Environment.SpecialFolder.MyDocuments)
                      {
                          string knownFolderPath = GetKnownFolderPath(FOLDERID_Documents);
                          Console.WriteLine($"[SHGetKnownFolderPath] Documents: {knownFolderPath}");
                      }
                      else if (folder == Environment.SpecialFolder.Desktop)
                      {
                          string knownFolderPath = GetKnownFolderPath(FOLDERID_Desktop);
                          Console.WriteLine($"[SHGetKnownFolderPath] Desktop: {knownFolderPath}");
                      }
                  }
              }
          
              // Method to call SHGetFolderPathW
              static unsafe string GetShellFolderPath(Environment.SpecialFolder folder)
              {
                  char* buffer = stackalloc char[260];  // Allocate buffer for the folder path
                  int result = SHGetFolderPathW(IntPtr.Zero, (int)folder, IntPtr.Zero, 0, buffer);
          
                  if (result == 0)  // 0 is the success code for SHGetFolderPathW
                  {
                      return new string(buffer);  // Convert the char array to a string
                  }
                  else
                  {
                      return $"Error {result}";  // Return an error code if the API fails
                  }
              }
          
              // Method to call SHGetKnownFolderPath
              static string GetKnownFolderPath(Guid folderId)
              {
                  StringBuilder sb = new StringBuilder(260);
                  int result = SHGetKnownFolderPath(ref folderId, 0, IntPtr.Zero, sb);
                  
                  if (result == 0)
                  {
                      return sb.ToString();
                  }
                  else
                  {
                      return $"Error {result}";
                  }
              }
          }
          '@

          # Publish the app to a directory (./publish) so it can be shared with Docker
          dotnet publish ./MyApp -c Release --self-contained -p:AllowUnsafeBlocks=true -o ./publish

          ./publish/MyApp.exe

      - name: Run Published App in Nano Server Container
        run: |
          docker run --rm -v "${{ github.workspace }}\publish:c:\app" mcr.microsoft.com/windows/nanoserver:ltsc2022 C:\app\MyApp.exe
          docker run --rm -v "${{ github.workspace }}\publish:c:\app" mcr.microsoft.com/windows/nanoserver:ltsc2022 cmd /c "set"
